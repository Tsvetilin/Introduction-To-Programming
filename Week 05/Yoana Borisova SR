void Swap(int& num1, int& num2)
{
    int temp = num1;
    num1 = num2;
    num2 = temp;
}

int* getArr(int num)
{
    const size_t ARRAY_SIZE = 10;
    int arr[ARRAY_SIZE];

    arr[0] = num;

    return arr; 
}

int main()
{
    const size_t ARRAY_SIZE = 1024;
    int arr1[ARRAY_SIZE];
    size_t array1Size;    
    std::cout << "Enter number of elements: ";
    std::cin >> array1Size;
    if (!std::cin)
    {
        std::cerr << "Could not read number of elements.";
    }
    if (array1Size > ARRAY_SIZE)
    {
        std::cerr << "Invalid number of elements. Max number of elements is " << ARRAY_SIZE;
    }

    int arr2[ARRAY_SIZE];
    size_t array2Size;
    std::cout << "Enter number of elements: ";
    std::cin >> array2Size;
    if (!std::cin)
    {
        std::cerr << "Could not read number of elements.";
    }
    if (array2Size > ARRAY_SIZE)
    {
        std::cerr << "Invalid number of elements. Max number of elements is " << ARRAY_SIZE;
    }

    //first array
    std::cout << "Enter the elements of first array: ";
    for (size_t i = 0; i < array1Size; i++)
    {
        std::cin >> arr1[i];
    }
    if (std::cin.bad())
    {
        std::cerr << "Could not read elements of array.";
    }
    //second array
    std::cout << "Enter the elements of second array: ";
    for (size_t i = 0; i < array2Size; i++)
    {
        std::cin >> arr2[i];
    }
    if (std::cin.bad())
    {
        std::cerr << "Could not read elements of array.";
    }

    int array3Size = array1Size + array2Size;
    int arr3[array3Size];
    //slivane
    for (size_t i = 0; i <= array1Size; i++)
    {
        arr3[i] = arr1[i];
    }
    for (size_t i = array1Size; i <= array3Size; i++)
    {
        arr3[i] = arr2[i-array1Size];
    }
    //sortirane
    for (size_t i = 0; i < array3Size - 1; i++)
    {
        bool swapped = false;
        for (size_t j = 0; j < array3Size - i - 1; j++)
        {
            if (arr3[j] > arr3[j + 1])
            {
                Swap(arr3[j], arr3[j + 1]); 
                swapped = true;
            }
        }
        if (!swapped)
        {
            break;
        }
    }
    std::cout << getArr(arr3);
}
