#include <iostream>


const size_t ARRSIZE = 100;
bool isPermutation(int a, int b)
{
    int countAOnes = 0, countBOnes = 0;
    while (a > 0)
    {
        if (a & 1)countAOnes++;
        a >>= 1;
    }
    while (b > 0)
    {
        if (b & 1)countBOnes++;
        b >>= 1;
    }
    return countAOnes == countBOnes;
}
int Ex1()
{
    int x, m, n;
    std::cin >> x >> m >> n;
    int mask = 1 << (m + 1);
    --mask;
    x = x & mask;
    x = x >> m - n + 1;
    return x;
}
int Ex2() 
{
    int a,count=0;
    std::cin >> a;
    int mask = 1;

    while (a!=0) 
    {
        if (a & mask)count++;
        a >>=1;
    }

    return count;
}
int Ex3() 
{
    int n, k;
    std::cin >> n >> k;
    int mask = 1 << k;
    n = n & (--mask);
    return n;
}
void Ex4Swap()
{
    int a, b;
    std::cin >> a >> b;
    a = a ^ b;
    b = a ^ b;
    a = a ^ b;

    std::cout << a << "  " << b;
}
int Ex5NoBits() 
{
    int n, p, b;
    std::cin >> n >> p >> b;
    if (b != 1 && b != 0) return -1;
    if (!b) 
    {
        n -= (int)pow(2, p);
        return n;
    }
    return n + (int)pow(2, p);
}
int Ex5()
{
    int n, p, b;
    std::cin >> n >> p >> b;
    if (b != 1 && b != 0) return -1;
    
    if (b)
    {
        int mask = b<<p;
        return n | mask;
    }

    int mask = ~((b + 1)<<p);
    return (n & mask);
}
bool Ex6()
{
    int a, b;
    std::cin >> a >> b;
    return isPermutation(a,b);
}
int Bonus1(int arr[ARRSIZE])
{
    int a = 0;
    for (size_t i = 0; i < ARRSIZE; i++)
    {
        a ^= arr[i];
    }
    return a;
}
void printSubset(int arr[],size_t len,size_t mask)
{
    std::cout << "{ ";
    for (size_t j = 0; j < len; j++)
    {
        if (mask % 2 != 0) std::cout << arr[j]<<" ";
        mask /= 2;
    }
    std::cout << "} " << std::endl;
}
void Bonus2(int arr[ARRSIZE], const int arrLen)
{
    int subs = 1 << arrLen;
    for (size_t i = 0; i < subs; i++)
    {
        printSubset(arr, arrLen, i);
    }
}

int main()
{
        // Ex.1
    //std::cout<<Ex1();

        //Ex.2
    //std::cout<<Ex2();

        //Ex.3
    //std::cout << Ex3();

        //EX.4
    //Ex4Swap();

        //Ex.5
    //std::cout<<Ex5();
    
        //Ex.6
    //std::cout<<Ex6();

        //Bonus1
    //int arr[ARRSIZE] = { 9,18,9,12,18,15,12};
    //std::cout << Bonus1(arr);

        //Bonus2
    //int arr[100] = {1,2,3};
    //Bonus2(arr,3);


}

